name: CI/CD Pipeline

# Trigger the workflow on push or pull request to the main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-and-validate:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e ".[dev]"
          pip install "mypy==1.7.1"  # Ensure specific version

      # Step 4: Run code quality checks
      - name: Run linting
        run: |
          flake8 app tests
          black --check app tests
          isort --check-only app tests

      # Step 5: Run type checking
      - name: Run type checking
        run: |
          echo "Running mypy with config from pyproject.toml..."
          mypy --config-file pyproject.toml --strict app

      # Step 6: Run tests with coverage
      - name: Run tests
        env:
          DATABASE_URL: postgresql+asyncpg://testuser:testpass@localhost:5432/testdb
          ENVIRONMENT: testing
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

      # Step 7: Upload coverage to Codecov (optional)
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  generate-and-deploy-docs:
    runs-on: ubuntu-latest
    needs: test-and-validate
    if: github.ref == 'refs/heads/main'

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Generate OpenAPI specification
      - name: Generate OpenAPI spec
        run: |
          python -c "
          import json
          from app.main import app
          with open('openapi.json', 'w') as f:
              json.dump(app.openapi(), f, indent=2)
          "

      # Step 5: Set up Node.js for Redoc
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Step 6: Generate HTML documentation using Redoc
      - name: Generate HTML documentation
        run: |
          npm install -g redoc-cli
          mkdir -p docs
          redoc-cli bundle openapi.json -o docs/index.html
          cp openapi.json docs/

      # Step 7: Deploy the generated documentation to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs